{
    "file_path": "tests/adapters/test_timeform_adapter_modernized.py",
    "content": "# Modernized test resurrected from attic/legacy_tests_pre_triage/adapters/test_timeform_adapter.py\nimport pytest\nfrom unittest.mock import MagicMock, patch\nimport httpx\nfrom decimal import Decimal\nfrom python_service.adapters.timeform_adapter import TimeformAdapter\nfrom python_service.models import Race, Runner\n\n@pytest.fixture\ndef timeform_adapter():\n    mock_config = MagicMock()\n    return TimeformAdapter(config=mock_config)\n\ndef read_fixture(file_path):\n    with open(file_path, 'r') as f:\n        return f.read()\n\n@pytest.mark.asyncio\nasync def test_timeform_adapter_parses_html_correctly(timeform_adapter):\n    \"\"\"Verify adapter correctly parses a known HTML fixture.\"\"\"\n    mock_html = read_fixture('tests/fixtures/timeform_modern_sample.html')\n\n    # Directly test the parsing of runners from the correct HTML structure\n    from bs4 import BeautifulSoup\n    soup = BeautifulSoup(mock_html, \"html.parser\")\n    runners = [timeform_adapter._parse_runner(row) for row in soup.select(\"div.rp-horseTable_mainRow\")]\n\n    assert len(runners) == 3, 'Should parse three runners'\n\n    braveheart = next((r for r in runners if r.name == 'Braveheart'), None)\n    assert braveheart is not None\n    assert braveheart.odds['Timeform'].win == Decimal('3.5')\n\n    steady_eddy = next((r for r in runners if r.name == 'Steady Eddy'), None)\n    assert steady_eddy is not None\n    assert steady_eddy.odds['Timeform'].win == Decimal('2.0')"
}