{
    "file_path": "tests/adapters/test_base_v3.py",
    "content": "# tests/adapters/test_base_v3.py\nimport pytest\nfrom typing import Any, List\nfrom python_service.adapters.base_v3 import BaseAdapterV3\nfrom python_service.models import Race\n\n# A concrete implementation for testing the abstract class\nclass ConcreteAdapter(BaseAdapterV3):\n    def __init__(self, source_name: str, base_url: str):\n        super().__init__(source_name, base_url)\n\n    SOURCE_NAME = \"TestAdapter\"\n    async def _fetch_data(self, date: str) -> Any:\n        if date == \"good_data\":\n            return [{\"id\": 1}, {\"id\": 2}]\n        if date == \"no_data\":\n            return None\n        if date == \"bad_data\":\n            raise ValueError(\"Simulated fetch error\")\n        return None\n\n    def _parse_races(self, raw_data: Any) -> List[Race]:\n        # In a real test, you'd mock Race objects\n        return raw_data # Simple passthrough for testing orchestration\n\n    async def fetch_races(self, date: str, http_client):\n        pass\n\n@pytest.mark.asyncio\nasync def test_get_races_orchestration_success():\n    \"\"\"Tests that _fetch_data and _parse_races are called in order on success.\"\"\"\n    adapter = ConcreteAdapter(source_name=\"TestAdapter\", base_url=\"http://test.com\")\n    races = [race async for race in adapter.get_races(\"good_data\")]\n    assert len(races) == 2\n    assert races == [{\"id\": 1}, {\"id\": 2}]\n    assert adapter.circuit_breaker_failure_count == 0\n\n@pytest.mark.asyncio\nasync def test_get_races_handles_no_data_from_fetch():\n    \"\"\"Tests that the pipeline gracefully exits if _fetch_data returns None.\"\"\"\n    adapter = ConcreteAdapter(source_name=\"TestAdapter\", base_url=\"http://test.com\")\n    races = [race async for race in adapter.get_races(\"no_data\")]\n    assert len(races) == 0\n\n@pytest.mark.asyncio\nasync def test_get_races_handles_fetch_exception_and_trips_breaker():\n    \"\"\"Tests that an exception in _fetch_data is caught and trips the circuit breaker.\"\"\"\n    adapter = ConcreteAdapter(source_name=\"TestAdapter\", base_url=\"http://test.com\")\n    assert not adapter.circuit_breaker_tripped\n\n    # Fail 3 times to trip the breaker\n    for _ in range(3):\n        races = [race async for race in adapter.get_races(\"bad_data\")]\n        assert len(races) == 0\n\n    assert adapter.circuit_breaker_tripped\n    assert adapter.circuit_breaker_failure_count == 3\n\n    # On the 4th attempt, it should not even try to fetch\n    races = [race async for race in adapter.get_races(\"good_data\")]\n    assert len(races) == 0"
}