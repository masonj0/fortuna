{
    "file_path": "tests/analyzers/test_trifecta_analyzer.py",
    "content": "# Dedicated test suite for the TrifectaAnalyzer, resurrected and expanded.\nimport pytest\nimport datetime\nfrom python_service.analyzer import TrifectaAnalyzer\nfrom python_service.models import Race, Runner\n\n@pytest.fixture\ndef analyzer():\n    return TrifectaAnalyzer()\n\n@pytest.fixture\ndef create_race(runners):\n    return Race(\n        id='test-race',\n        venue='TEST',\n        race_number=1,\n        start_time=datetime.datetime.now(),\n        runners=runners,\n        source='test'\n    )\n\ndef test_analyzer_name(analyzer):\n    assert analyzer.name == \"trifecta_analyzer\"\n\n# Test cases resurrected from legacy scorer and logic tests\ndef test_qualifies_with_exactly_three_runners(analyzer, create_race):\n    runners = [\n        Runner(number=1, name='A', odds='2/1', scratched=False),\n        Runner(number=2, name='B', odds='3/1', scratched=False),\n        Runner(number=3, name='C', odds='4/1', scratched=False)\n    ]\n    race = create_race(runners)\n    assert analyzer.is_race_qualified(race) is True\n\ndef test_qualifies_with_more_than_three_runners(analyzer, create_race):\n    runners = [\n        Runner(number=1, name='A', odds='2/1', scratched=False),\n        Runner(number=2, name='B', odds='3/1', scratched=False),\n        Runner(number=3, name='C', odds='4/1', scratched=False),\n        Runner(number=4, name='D', odds='5/1', scratched=False)\n    ]\n    race = create_race(runners)\n    assert analyzer.is_race_qualified(race) is True\n\n# New test cases for edge-case hardening\ndef test_rejects_with_fewer_than_three_runners(analyzer, create_race):\n    runners = [\n        Runner(number=1, name='A', odds='2/1', scratched=False),\n        Runner(number=2, name='B', odds='3/1', scratched=False)\n    ]\n    race = create_race(runners)\n    assert analyzer.is_race_qualified(race) is False\n\ndef test_rejects_if_scratched_runners_reduce_field_below_three(analyzer, create_race):\n    runners = [\n        Runner(number=1, name='A', odds='2/1', scratched=False),\n        Runner(number=2, name='B', odds='3/1', scratched=False),\n        Runner(number=3, name='C', odds='4/1', scratched=True) # Scratched\n    ]\n    race = create_race(runners)\n    assert analyzer.is_race_qualified(race) is False\n\ndef test_handles_empty_runner_list(analyzer, create_race):\n    race = create_race([])\n    assert analyzer.is_race_qualified(race) is False\n\ndef test_handles_none_race_object(analyzer):\n    assert analyzer.is_race_qualified(None) is False"
}