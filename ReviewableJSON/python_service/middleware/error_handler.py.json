{
    "file_path": "python_service/middleware/error_handler.py",
    "content": "from fastapi import Request, Response\nfrom fastapi.responses import JSONResponse\nfrom starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint\nimport httpx\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n# A dictionary mapping exception types to user-friendly messages and appropriate HTTP status codes\nEXCEPTION_MAP = {\n    httpx.ConnectError: (\"Could not connect to an external data service. Please check your internet connection and firewall settings.\", 503),\n    httpx.ReadTimeout: (\"A data source is not responding in time. This is usually a temporary issue. Please try again in a few minutes.\", 504),\n    httpx.HTTPStatusError: (\"An external data service returned an error. The service may be temporarily down or experiencing issues.\", 502),\n    KeyError: (\"A required data field was missing from a data source, causing a processing error.\", 500),\n    ValueError: (\"Received invalid or unexpected data from a data source.\", 500),\n}\n\nclass UserFriendlyErrorMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:\n        try:\n            response = await call_next(request)\n            return response\n        except Exception as exc:\n            logger.error(f\"Caught exception: {type(exc).__name__}: {exc}\", exc_info=True)\n\n            # Default error message\n            message, status_code = \"An unexpected internal error occurred. Please check the logs for details.\", 500\n\n            # Find the most specific matching exception in our map\n            for exc_type, (msg, code) in EXCEPTION_MAP.items():\n                if isinstance(exc, exc_type):\n                    message, status_code = msg, code\n                    break\n\n            return JSONResponse(\n                status_code=status_code,\n                content={\"detail\": message}\n            )\n"
}