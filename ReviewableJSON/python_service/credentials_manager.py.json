{
    "file_path": "python_service/credentials_manager.py",
    "content": "import keyring\nfrom pathlib import Path\n\ntry:\n    import keyring.backends.windows\n    IS_WINDOWS = True\nexcept ImportError:\n    IS_WINDOWS = False\n\nclass SecureCredentialsManager:\n    \"\"\"Store secrets in Windows Credential Manager, not plaintext files\"\"\"\n\n    SERVICE_NAME = \"Fortuna Faucet\"\n\n    @staticmethod\n    def save_api_key(key: str) -> bool:\n        \"\"\"Save API key securely to Windows Credential Manager\"\"\"\n        if not IS_WINDOWS:\n            return False\n        try:\n            keyring.set_password(\n                SecureCredentialsManager.SERVICE_NAME,\n                \"api_key\",\n                key\n            )\n            return True\n        except Exception as e:\n            print(f\"\u274c Failed to save credentials: {e}\")\n            return False\n\n    @staticmethod\n    def get_api_key() -> str:\n        \"\"\"Retrieve API key from Windows Credential Manager\"\"\"\n        if not IS_WINDOWS:\n            return None\n        try:\n            key = keyring.get_password(\n                SecureCredentialsManager.SERVICE_NAME,\n                \"api_key\"\n            )\n            if not key:\n                raise ValueError(\"No stored credentials found\")\n            return key\n        except Exception as e:\n            print(f\"\u274c Failed to retrieve credentials: {e}\")\n            return None\n\n    @staticmethod\n    def delete_all_credentials():\n        \"\"\"Clear stored credentials (for uninstall)\"\"\"\n        if not IS_WINDOWS:\n            return\n        try:\n            keyring.delete_password(\n                SecureCredentialsManager.SERVICE_NAME,\n                \"api_key\"\n            )\n        except:\n            pass"
}