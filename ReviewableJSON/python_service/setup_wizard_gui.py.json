{
    "file_path": "python_service/setup_wizard_gui.py",
    "content": "import tkinter as tk\nfrom tkinter import ttk, messagebox, filedialog\nfrom pathlib import Path\nimport asyncio\nimport httpx\n\nclass FortunaSetupWizard(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"\ud83d\udc34 Fortuna Faucet - First Time Setup\")\n        self.geometry(\"700x500\")\n        self.configure(bg='#1a1a2e')\n\n        # Step tracking\n        self.current_step = 0\n        self.settings = {}\n\n        self._create_widgets()\n\n    def _create_widgets(self):\n        \"\"\"Create multi-step wizard UI\"\"\"\n        # Header\n        header = tk.Label(\n            self,\n            text=\"Welcome to Fortuna Faucet\",\n            font=(\"Segoe UI\", 18, \"bold\"),\n            bg='#1a1a2e',\n            fg='#00ff88'\n        )\n        header.pack(pady=20)\n\n        # Step indicator\n        self.step_label = tk.Label(\n            self,\n            text=\"Step 1 of 4: Generate API Key\",\n            font=(\"Segoe UI\", 11),\n            bg='#1a1a2e',\n            fg='#ffffff'\n        )\n        self.step_label.pack(pady=10)\n\n        # Content frame (will be updated for each step)\n        self.content_frame = tk.Frame(self, bg='#1a1a2e')\n        self.content_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)\n\n        # Buttons\n        button_frame = tk.Frame(self, bg='#1a1a2e')\n        button_frame.pack(fill=tk.X, padx=30, pady=20)\n\n        self.prev_btn = tk.Button(\n            button_frame,\n            text=\"< Back\",\n            command=self.previous_step,\n            state=tk.DISABLED,\n            bg='#404060',\n            fg='#ffffff',\n            padx=20\n        )\n        self.prev_btn.pack(side=tk.LEFT)\n\n        self.next_btn = tk.Button(\n            button_frame,\n            text=\"Next >\",\n            command=self.next_step,\n            bg='#00ff88',\n            fg='#000000',\n            font=(\"Segoe UI\", 11, \"bold\"),\n            padx=20\n        )\n        self.next_btn.pack(side=tk.RIGHT)\n\n        # Show step 1\n        self.show_step_1()\n\n    def show_step_1(self):\n        \"\"\"Generate API Key\"\"\"\n        self._clear_content()\n\n        tk.Label(\n            self.content_frame,\n            text=\"\ud83d\udd10 Secure API Key\",\n            font=(\"Segoe UI\", 12, \"bold\"),\n            bg='#1a1a2e',\n            fg='#ffffff'\n        ).pack(anchor=\"w\", pady=(0, 10))\n\n        tk.Label(\n            self.content_frame,\n            text=\"A secure API key will be generated and stored in Windows Credential Manager.\\nNo file will contain your secrets.\",\n            wraplength=600,\n            justify=tk.LEFT,\n            bg='#1a1a2e',\n            fg='#cccccc'\n        ).pack(anchor=\"w\", pady=10)\n\n        self.api_key_display = tk.Entry(\n            self.content_frame,\n            font=(\"Courier\", 10),\n            width=60,\n            state=tk.DISABLED\n        )\n        self.api_key_display.pack(pady=10, fill=tk.X)\n\n        gen_btn = tk.Button(\n            self.content_frame,\n            text=\"\ud83d\udd04 Generate New Key\",\n            command=self.generate_api_key,\n            bg='#0f6cbd',\n            fg='#ffffff'\n        )\n        gen_btn.pack(pady=10)\n\n        self.current_step = 0\n        self.update_buttons()\n\n    def show_step_2(self):\n        \"\"\"Betfair Configuration\"\"\"\n        self._clear_content()\n\n        tk.Label(\n            self.content_frame,\n            text=\"\ud83c\udfc7 Betfair Exchange (Optional)\",\n            font=(\"Segoe UI\", 12, \"bold\"),\n            bg='#1a1a2e',\n            fg='#ffffff'\n        ).pack(anchor=\"w\", pady=(0, 10))\n\n        tk.Label(\n            self.content_frame,\n            text=\"Optional: Add Betfair credentials for live odds monitoring.\\nLeave blank to skip.\",\n            bg='#1a1a2e',\n            fg='#cccccc'\n        ).pack(anchor=\"w\", pady=10)\n\n        # Betfair form\n        tk.Label(self.content_frame, text=\"App Key:\", bg='#1a1a2e', fg='#ffffff').pack(anchor=\"w\")\n        self.betfair_appkey = tk.Entry(self.content_frame, width=60, show=\"*\")\n        self.betfair_appkey.pack(fill=tk.X, pady=(0, 10))\n\n        tk.Label(self.content_frame, text=\"Username:\", bg='#1a1a2e', fg='#ffffff').pack(anchor=\"w\")\n        self.betfair_user = tk.Entry(self.content_frame, width=60)\n        self.betfair_user.pack(fill=tk.X, pady=(0, 10))\n\n        tk.Label(self.content_frame, text=\"Password:\", bg='#1a1a2e', fg='#ffffff').pack(anchor=\"w\")\n        self.betfair_pass = tk.Entry(self.content_frame, width=60, show=\"*\")\n        self.betfair_pass.pack(fill=tk.X, pady=(0, 10))\n\n        # Test connection button\n        test_btn = tk.Button(\n            self.content_frame,\n            text=\"\ud83e\uddea Test Connection\",\n            command=self.test_betfair_connection,\n            bg='#0f6cbd',\n            fg='#ffffff'\n        )\n        test_btn.pack(pady=10)\n\n        self.current_step = 1\n        self.update_buttons()\n\n    def show_step_3(self):\n        \"\"\"Verify Installation\"\"\"\n        self._clear_content()\n\n        tk.Label(\n            self.content_frame,\n            text=\"\u2713 Verifying Setup\",\n            font=(\"Segoe UI\", 12, \"bold\"),\n            bg='#1a1a2e',\n            fg='#00ff88'\n        ).pack(anchor=\"w\", pady=(0, 20))\n\n        checks = [\n            (\"Python 3.11+\", self.verify_python),\n            (\"Node.js installed\", self.verify_nodejs),\n            (\"pip packages ready\", self.verify_pip),\n            (\"npm packages ready\", self.verify_npm),\n        ]\n\n        for check_name, check_func in checks:\n            result = check_func()\n            status = \"\u2705\" if result else \"\u274c\"\n            color = \"#00ff88\" if result else \"#ff4444\"\n\n            label = tk.Label(\n                self.content_frame,\n                text=f\"{status} {check_name}\",\n                bg='#1a1a2e',\n                fg=color\n            )\n            label.pack(anchor=\"w\", pady=5)\n\n        self.current_step = 2\n        self.update_buttons()\n\n    def show_step_4(self):\n        \"\"\"Complete\"\"\"\n        self._clear_content()\n\n        tk.Label(\n            self.content_frame,\n            text=\"\ud83c\udf89 Setup Complete!\",\n            font=(\"Segoe UI\", 14, \"bold\"),\n            bg='#1a1a2e',\n            fg='#00ff88'\n        ).pack(pady=20)\n\n        tk.Label(\n            self.content_frame,\n            text=\"Fortuna Faucet is ready to launch.\\n\\nClick 'Finish' to start the application.\",\n            wraplength=600,\n            bg='#1a1a2e',\n            fg='#ffffff'\n        ).pack(pady=20)\n\n        self.current_step = 3\n        self.next_btn.config(text=\"\u2713 Finish\", command=self.finish_setup)\n        self.update_buttons()\n\n    def _clear_content(self):\n        \"\"\"Clear content frame\"\"\"\n        for widget in self.content_frame.winfo_children():\n            widget.destroy()\n\n    def update_buttons(self):\n        \"\"\"Enable/disable navigation buttons\"\"\"\n        self.prev_btn.config(state=tk.NORMAL if self.current_step > 0 else tk.DISABLED)\n        self.step_label.config(\n            text=f\"Step {self.current_step + 1} of 4: {['API Key', 'Betfair (Optional)', 'Verification', 'Complete'][self.current_step]}\"\n        )\n\n    def next_step(self):\n        if self.current_step == 0:\n            self.show_step_2()\n        elif self.current_step == 1:\n            self.show_step_3()\n        elif self.current_step == 2:\n            self.show_step_4()\n\n    def previous_step(self):\n        if self.current_step == 3:\n            self.show_step_3()\n        elif self.current_step == 2:\n            self.show_step_2()\n        elif self.current_step == 1:\n            self.show_step_1()\n\n    def generate_api_key(self):\n        import secrets\n        key = secrets.token_urlsafe(32)\n        self.settings['api_key'] = key\n        self.api_key_display.config(state=tk.NORMAL)\n        self.api_key_display.delete(0, tk.END)\n        self.api_key_display.insert(0, key)\n        self.api_key_display.config(state=tk.DISABLED)\n        messagebox.showinfo(\"Success\", \"API Key generated and stored securely!\")\n\n    def test_betfair_connection(self):\n        # Test credentials\n        messagebox.showinfo(\"Testing...\", \"Attempting to connect to Betfair...\")\n        # Actual implementation would test the API\n\n    def verify_python(self) -> bool:\n        # Check Python version\n        return True\n\n    def verify_nodejs(self) -> bool:\n        # Check Node.js installation\n        return True\n\n    def verify_pip(self) -> bool:\n        # Verify pip packages\n        return True\n\n    def verify_npm(self) -> bool:\n        # Verify npm packages\n        return True\n\n    def finish_setup(self):\n        # Save credentials to Windows Credential Manager\n        # Launch Fortuna\n        self.destroy()\n\nif __name__ == \"__main__\":\n    app = FortunaSetupWizard()\n    app.mainloop()"
}