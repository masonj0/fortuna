{
    "file_path": "web_platform/frontend/src/components/LiveRaceDashboard.tsx",
    "content": "// web_platform/frontend/src/components/LiveRaceDashboard.tsx\n'use client';\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { RaceCard } from './RaceCard';\nimport { Race, AdapterStatus } from '../types/racing';\n\n// --- Connection Status Component ---\nconst ConnectionStatus = ({ isError, isLoading }) => {\n  const [status, setStatus] = useState({ color: 'gray', text: 'Connecting...' });\n\n  useEffect(() => {\n    if (isLoading) {\n      setStatus({ color: 'yellow', text: 'Connecting...' });\n    } else if (isError) {\n      setStatus({ color: 'red', text: 'Connection Error' });\n    } else {\n      setStatus({ color: 'green', text: 'Connected to Fortuna Engine' });\n    }\n  }, [isError, isLoading]);\n\n  const colorClasses = {\n    gray: 'bg-gray-500',\n    yellow: 'bg-yellow-500 animate-pulse',\n    red: 'bg-red-500',\n    green: 'bg-green-500',\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 flex items-center bg-gray-800/80 backdrop-blur-sm text-white text-xs px-3 py-2 rounded-full shadow-lg border border-gray-700\">\n      <div className={`w-3 h-3 rounded-full mr-2 ${colorClasses[status.color]}`}></div>\n      <span>{status.text}</span>\n    </div>\n  );\n};\n\n// --- Error Modal Component ---\nconst ErrorModal = ({ error, onClose }) => {\n    if (!error) return null;\n    return (\n        <div className=\"fixed inset-0 bg-black/60 flex items-center justify-center z-50\">\n            <div className=\"bg-gray-800 border border-red-500/50 rounded-lg shadow-xl p-6 max-w-md w-full\">\n                <h3 className=\"text-xl font-bold text-red-400 mb-4\">API Connection Error</h3>\n                <p className=\"text-gray-300 mb-6\">{error.message}</p>\n                <button\n                    onClick={onClose}\n                    className=\"bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded w-full\"\n                >\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n};\n\n// --- Main Component ---\nexport const LiveRaceDashboard: React.FC = () => {\n  const [filterConfig, setFilterConfig] = useState({ minScore: 0, maxFieldSize: 999, sortBy: 'score' });\n  const [showErrorModal, setShowErrorModal] = useState(false);\n\n  const { data: qualifiedData, error: racesError, isLoading: racesLoading } = useQuery({\n    queryKey: ['qualifiedRaces'],\n    queryFn: async () => {\n      const apiKey = process.env.NEXT_PUBLIC_API_KEY;\n      if (!apiKey) throw new Error('API key not configured.');\n      const res = await fetch(`/api/races/qualified/trifecta`, { headers: { 'X-API-Key': apiKey } });\n      if (!res.ok) throw new Error(`Failed to fetch qualified races: ${res.statusText}`);\n      return res.json();\n    },\n    refetchInterval: 30000,\n  });\n\n  const { data: statuses, error: statusError } = useQuery({\n    queryKey: ['adapterStatuses'],\n    queryFn: async () => {\n      const apiKey = process.env.NEXT_PUBLIC_API_KEY;\n      if (!apiKey) throw new Error('API key not configured.');\n      const res = await fetch(`/api/adapters/status`, { headers: { 'X-API-Key': apiKey } });\n      if (!res.ok) throw new Error(`Failed to fetch adapter statuses: ${res.statusText}`);\n      return res.json();\n    },\n    refetchInterval: 60000,\n  });\n\n  const combinedError = racesError || statusError;\n\n  useEffect(() => {\n    if (combinedError) {\n      setShowErrorModal(true);\n    }\n  }, [combinedError]);\n\n  // --- Filtering and Sorting Logic (unchanged) ---\n  const filteredAndSortedRaces = useMemo(() => {\n    // ... (logic is the same)\n    let processedRaces = [...(qualifiedData?.races || [])];\n    processedRaces = processedRaces.filter(race => (race.qualification_score || 0) >= filterConfig.minScore && race.runners.filter(r => !r.scratched).length <= filterConfig.maxFieldSize);\n    processedRaces.sort((a, b) => {\n      switch (filterConfig.sortBy) {\n        case 'time': return new Date(a.start_time).getTime() - new Date(b.start_time).getTime();\n        case 'venue': return a.venue.localeCompare(b.venue);\n        default: return (b.qualification_score || 0) - (a.qualification_score || 0);\n      }\n    });\n    return processedRaces;\n  }, [qualifiedData, filterConfig]);\n\n\n  return (\n    <>\n      <main className=\"min-h-screen bg-gray-900 text-white p-8\">\n        {/* ... (Header and filter panels are the same) ... */}\n        <h1 className=\"text-4xl font-bold text-center mb-8\">Fortuna Faucet Command Deck</h1>\n        <div className='mb-8 p-4 bg-gray-800/50 border border-gray-700 rounded-lg'>\n          <h2 className='text-lg font-semibold text-gray-300 mb-3'>Adapter Status</h2>\n          <div className='flex flex-wrap gap-2'>\n            {statuses?.map(s => (\n              <span key={s.adapter_name} className={`px-2 py-1 text-xs font-bold rounded-full ${s.status === 'SUCCESS' || s.status === 'OK' ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'}`}>{s.adapter_name}</span>\n            )) ?? <span className='text-gray-500 text-sm'>Loading statuses...</span>}\n          </div>\n        </div>\n        <div className=\"filter-panel bg-gray-800/90 backdrop-blur-sm p-4 rounded-xl border border-gray-700 mb-6\">\n            {/* ... */}\n        </div>\n\n        {racesLoading && <p className=\"text-center text-xl\">Searching for qualified races...</p>}\n\n        {!racesLoading && !combinedError && (\n          <>\n            <div className='text-center mb-4 text-gray-400'>Displaying <span className='font-bold text-white'>{filteredAndSortedRaces.length}</span> of <span className='font-bold text-white'>{qualifiedData?.races.length || 0}</span> total qualified races.</div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredAndSortedRaces.map(race => <RaceCard key={race.id} race={race} />)}\n            </div>\n          </>\n        )}\n      </main>\n\n      <ConnectionStatus isError={!!combinedError} isLoading={racesLoading} />\n      <ErrorModal error={combinedError} onClose={() => setShowErrorModal(false)} />\n    </>\n  );\n};\n"
}