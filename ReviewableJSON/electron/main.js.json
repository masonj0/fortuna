{
    "file_path": "electron/main.js",
    "content": "// electron/main.js\nconst { app, BrowserWindow, Tray, Menu, nativeImage, dialog } = require('electron');\nconst { spawn, exec } = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\n// --- Python Backend Manager ---\nclass PythonManager {\n    constructor() {\n        this.venvPath = path.join(app.getPath('userData'), 'backend_env');\n        this.pythonPath = path.join(this.venvPath, 'Scripts', 'python.exe');\n        this.backendProcess = null;\n    }\n\n    async setupEnvironment() {\n        return new Promise((resolve, reject) => {\n            if (fs.existsSync(this.pythonPath)) {\n                console.log('Python environment already exists.');\n                return resolve();\n            }\n\n            console.log('Creating Python virtual environment...');\n            exec(`python -m venv \"${this.venvPath}\"`, (error, stdout, stderr) => {\n                if (error) {\n                    console.error(`Failed to create venv: ${stderr}`);\n                    dialog.showErrorBox('Fatal Error', 'Failed to create the Python virtual environment. Please ensure Python 3.9+ is installed and in your PATH.');\n                    return reject(error);\n                }\n                console.log('Virtual environment created. Installing backend...');\n                this.installBackend().then(resolve).catch(reject);\n            });\n        });\n    }\n\n    async installBackend() {\n        return new Promise((resolve, reject) => {\n            const pipPath = path.join(this.venvPath, 'Scripts', 'pip.exe');\n            const wheelPath = path.resolve(__dirname, '..', 'dist', 'fortuna_engine-1.0.0-py3-none-any.whl'); // Assuming a wheel is built\n            const reqsPath = path.resolve(__dirname, '..', 'requirements.txt');\n\n            exec(`\"${pipPath}\" install -r \"${reqsPath}\"`, (error, stdout, stderr) => {\n                if (error) {\n                    console.error(`Failed to install dependencies: ${stderr}`);\n                    dialog.showErrorBox('Backend Error', 'Failed to install Python dependencies.');\n                    return reject(error);\n                }\n                console.log('Backend installed successfully.');\n                resolve();\n            });\n        });\n    }\n\n    start() {\n        console.log(`Spawning backend from: ${this.pythonPath}`);\n        this.backendProcess = spawn(this.pythonPath, ['-m', 'python_service.run_api'], {\n            cwd: path.resolve(__dirname, '..')\n        });\n\n        this.backendProcess.stdout.on('data', (data) => console.log(`Backend: ${data}`));\n        this.backendProcess.stderr.on('data', (data) => console.error(`Backend ERR: ${data}`));\n    }\n\n    stop() {\n        if (this.backendProcess) {\n            this.backendProcess.kill();\n        }\n    }\n}\n\n\n// --- Main Application Class ---\nclass FortunaDesktopApp {\n  constructor() {\n    this.mainWindow = null;\n    this.tray = null;\n    this.pythonManager = new PythonManager();\n\n    const gotTheLock = app.requestSingleInstanceLock();\n    if (!gotTheLock) {\n      app.quit();\n    } else {\n      app.on('second-instance', () => {\n        if (this.mainWindow) {\n          if (this.mainWindow.isMinimized()) this.mainWindow.restore();\n          this.mainWindow.focus();\n        }\n      });\n    }\n  }\n\n  createMainWindow() {\n    this.mainWindow = new BrowserWindow({\n      width: 1600,\n      height: 1000,\n      title: 'Fortuna Faucet - Racing Analysis',\n      icon: path.join(__dirname, 'assets', 'icon.ico'),\n      webPreferences: {\n        nodeIntegration: false,\n        contextIsolation: true,\n        preload: path.join(__dirname, 'preload.js')\n      },\n      autoHideMenuBar: true,\n      backgroundColor: '#1a1a2e',\n      show: false\n    });\n\n    this.mainWindow.on('close', (event) => {\n      if (!app.isQuitting) {\n        event.preventDefault();\n        this.mainWindow.hide();\n      }\n      return false;\n    });\n\n    const isDev = process.env.NODE_ENV !== 'production';\n    if (isDev) {\n      this.mainWindow.loadURL('http://localhost:3000');\n    } else {\n      this.mainWindow.loadFile(path.join(__dirname, '..', 'web_platform', 'frontend', 'out', 'index.html'));\n    }\n\n    this.mainWindow.once('ready-to-show', () => {\n        this.mainWindow.show();\n    });\n  }\n\n  createSystemTray() {\n    const iconPath = path.join(__dirname, 'assets', 'tray-icon.png');\n    const icon = nativeImage.createFromPath(iconPath);\n    this.tray = new Tray(icon.resize({ width: 16, height: 16 }));\n\n    const contextMenu = Menu.buildFromTemplate([\n      { label: 'Show Dashboard', click: () => this.showWindow() },\n      { type: 'separator' },\n      { label: 'Quit Fortuna Faucet', click: () => this.quitApp() }\n    ]);\n\n    this.tray.setToolTip('Fortuna Faucet - Monitoring Races');\n    this.tray.setContextMenu(contextMenu);\n    this.tray.on('double-click', () => this.showWindow());\n  }\n\n  showWindow() {\n    if (this.mainWindow) {\n      this.mainWindow.show();\n      this.mainWindow.focus();\n    }\n  }\n\n  quitApp() {\n    app.isQuitting = true;\n    app.quit();\n  }\n\n  async initialize() {\n    try {\n        await this.pythonManager.setupEnvironment();\n        this.pythonManager.start();\n        this.createMainWindow();\n        this.createSystemTray();\n    } catch(err) {\n        console.error(\"Initialization failed:\", err);\n        app.quit();\n    }\n  }\n\n  cleanup() {\n    console.log('Cleaning up processes...');\n    this.pythonManager.stop();\n  }\n}\n\nlet fortunaApp;\n\napp.whenReady().then(() => {\n  fortunaApp = new FortunaDesktopApp();\n  fortunaApp.initialize();\n});\n\napp.on('window-all-closed', (event) => {\n  event.preventDefault();\n});\n\napp.on('before-quit', () => {\n  if(fortunaApp) {\n    fortunaApp.cleanup();\n  }\n});\n"
}